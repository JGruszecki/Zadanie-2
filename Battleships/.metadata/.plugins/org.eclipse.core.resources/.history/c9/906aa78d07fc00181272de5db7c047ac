package battleships.model;

import java.util.ArrayList;
import java.util.Random;

public class Ship {
	
	public int size;
	public int health;
	public int startX;
	public int startY;
	public int endX;
	public int endY;
	public boolean isDestroyed = false;
	public boolean rotation = false;
	/*
	 * If horizontal - false
	 * If vertical - true
	 */
	
    public Ship(int size, int startX, int startY, int endX, int endY) {
        this.size = size;
        this.startX = startX;
        this.startY = startY;
        this.endX = endX;
        this.endY = endY;
        this.health = size;
    }
    
    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }

    public int getStartX() {
        return startX;
    }

    public void setStartX(int startX) {
        this.startX = startX;
    }

    public int getStartY() {
        return startY;
    }

    public void setStartY(int startY) {
        this.startY = startY;
    }

    public void setIsSet(boolean isSet) {
        this.isSet = isSet;
    }

    public boolean getIsSet() {
        return isSet;
    }

    public int getEndX() {
        return endX;
    }

    public void setEndX(int endX) {
        this.endX = endX;
    }

    public int getEndY() {
        return endY;
    }

    public void setEndY(int endY) {
        this.endY = endY;
    }

    public boolean hit() {
        this.health--;
        if (this.health == 0) {
            this.isDestroyed = true;
        }

        return this.isDestroyed;
    }

    public boolean isDestroyed() {
        return this.isDestroyed;
    }

    public boolean checkCoords(ArrayList<ArrayList<Field>> board) {
        for (int x = this.startX; x <= this.endX; x++) {
            for (int y = this.startY; y <= this.endY; y++) {
                if (x < 0 || y < 0 || x > 9 || y > 9 || (board.get(x).get(y).getShip() != null)) {
                    return false;
                }
            }
        }
        return true;
    }

    public void generateCoords(ArrayList<ArrayList<Field>> board) {
        Random gen = new Random();
        this.startX = gen.nextInt(10);
        this.startY = gen.nextInt(10);
        int dir = gen.nextInt(4);
        boolean i = true;
        while (i) {
            //Go North
            if (dir == 0) {
                this.endX = this.startX;
                this.endY = this.startY;
                this.startY = this.startY - (this.size - 1);
                if (this.checkCoords(board)) {

                    i = false;
                } else {
                    this.startX = this.endX;    //Put starting positions back at beginning
                    this.startY = this.endY;    //Put starting positions back at beginning
                    dir++;
                }
            }

            //Go East
            if (dir == 1) {
                this.endX = this.startX + (this.size - 1);
                this.endY = this.startY;
                if (this.checkCoords(board)) {
                    i = false;
                } else {
                    dir++;
                }
            }

            //Go South
            if (dir == 2) {
                this.endX = this.startX;
                this.endY = this.startY + (this.size - 1);
                if (this.checkCoords(board)) {
                    i = false;
                } else {
                    dir++;
                }
            }

            //Go West
            if (dir == 3) {
                this.endX = this.startX;
                this.endY = this.startY;
                this.startX = this.startX - (this.size - 1);
                if (this.checkCoords(board)) {
                    i = false;
                }
            }

            //If no room available at this spot, try another
            if (i) {
                this.startX = gen.nextInt(10);
                this.startY = gen.nextInt(10);
                dir = gen.nextInt(4);
            }

        }
    }
}
