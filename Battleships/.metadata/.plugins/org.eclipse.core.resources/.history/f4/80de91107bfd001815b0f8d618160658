package battleships.controller;

import battleships.model.*;
	
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;

import java.net.URL;
import java.util.ResourceBundle;
import java.util.Random;


public class Controller implements Initializable{
	
	PlayerBoard playerBoard;
	EnemyBoard enemyBoard;

	int playerShipsAmount = 15;
	int enemyShipsAmount = 15;
	int possibleShipSize = 5;
	int counter = 0;
	
	@FXML
	public GridPane playerDisplayBoard;
	
	@FXML
	public GridPane enemyDisplayBoard;
	
	@FXML
	public Button startButton;
	
	@FXML 
	public Button resetButton;
	
	@FXML
	public Button restartButton;
	
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	playerBoard = new PlayerBoard(playerDisplayBoard);
    	enemyBoard = new EnemyBoard(enemyDisplayBoard);
    	playerBoard.createBoard();
    	setPlayerBoard(playerBoard);
    	startButton.disableProperty().set(true);
    	restartButton.disableProperty().set(true);
    }


    @FXML
    public void startButtonClicked(ActionEvent event) {
    	playerShipsAmount = 15;
    	enemyBoard.createBoard();
    	setEnemyBoard(enemyBoard);
    	startButton.disableProperty().set(true);
    	resetButton.disableProperty().set(true);
    	playerBoard.setFieldsState(true);
    	enemyBoard.setFieldsState(false);
    	generateRandom();
    }
    
    @FXML
    public void resetButtonClicked(ActionEvent event)  {
    	playerBoard.setFieldsState(false);
    	playerBoard.createBoard();
    	setPlayerBoard(playerBoard);
    	playerShipsAmount = 15;
    	possibleShipSize = 5;
    	startButton.disableProperty().set(true);
    }
    
    @FXML
    public void restartButtonClick(ActionEvent event) {
    	enemyShipsAmount = 15;
    	playerShipsAmount = 15;
    	possibleShipSize = 5;
    	playerBoard.setFieldsState(false);
    	enemyBoard.setFieldsState(false);
    	playerBoard.createBoard();
    	setPlayerBoard(playerBoard);
    	enemyBoard.createBoard();
    	startButton.disableProperty().set(true);
    	restartButton.disableProperty().set(true);
    	resetButton.disableProperty().set(false);
    	enemyBoard.setFieldsState(true);
    	playerBoard.resetHits();
    	enemyBoard.destroyAllShips();
    	playerBoard.destroyAllShips();
    }
    
    public void setPlayerBoard(PlayerBoard board) {
    	for (Node node : playerDisplayBoard.getChildren()) {
    		if(node instanceof Rectangle) {
            Rectangle rect = (Rectangle) node;
            rect.disableProperty().set(false);
            rect.setOnMouseClicked(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent event) {
                Rectangle r = (Rectangle) event.getSource();
                int col = GridPane.getColumnIndex(r);
                int row = GridPane.getRowIndex(r);
                if (playerBoard.gameBoard.get(col).get(row).checkIfClicked()) {
                    return;
                }
                if(possibleShipSize > 1) {
                	Ship ship =  new Ship(col, row, possibleShipSize);
                	board.addShip(ship, true);
                	playerBoard.ships.add(ship);
                	counter++;
                	if(counter == 2) {
                		possibleShipSize--;
                		counter = 0;
                	}
                	
                }
                if(possibleShipSize == 1) {
                	startButton.disableProperty().set(false);
                	playerBoard.setFieldsState(true);
                }
                System.out.println(col);
                System.out.println(row);
                r.setFill(Color.GREEN);
                r.disableProperty().set(true);
            }
            });
    		}
    	}
    }
    
    public void setEnemyBoard(EnemyBoard board) {
    	for (Node node : enemyDisplayBoard.getChildren()) {
    		if(node instanceof Rectangle) {
            Rectangle rect = (Rectangle) node;
            rect.disableProperty().set(false);
            rect.setOnMouseClicked(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent event) {
                Rectangle r = (Rectangle) event.getSource();
                int col = GridPane.getColumnIndex(r);
                int row = GridPane.getRowIndex(r);
                if (enemyBoard.gameBoard.get(col).get(row).checkIfClicked()) {
                    return;
                }
                System.out.println(col);
                enemyBoard.checkField(col, row);
                if (r.getFill().equals(Color.RED))
                	enemyShipsAmount--;
                
                enemyGuess();

                if(enemyShipsAmount == 0) {
                    Alert winAlert = new Alert(AlertType.INFORMATION);
                    winAlert.setTitle("VICTORY");
                    winAlert.setContentText("You Win!");
                    winAlert.setHeaderText(null);
                    winAlert.showAndWait();
                    restartButton.disableProperty().set(false);
                    enemyBoard.setFieldsState(true);
                }
                if(playerShipsAmount == 0) {
                    Alert loseAlert = new Alert(AlertType.INFORMATION);
                    loseAlert.setTitle("DEFEAT");
                    loseAlert.setHeaderText(null);
                    loseAlert.setContentText("You Lose...");
                    loseAlert.showAndWait();
                    restartButton.disableProperty().set(false);
                    enemyBoard.setFieldsState(true);
                }
            }
            });
    		}
    	}
    }
    
    public void generateRandom() {
    	int col;
    	int row;
		Random rand = new Random();
    	for(int i = 0; i < 15; i++) {
    		col = rand.nextInt(9);
    		row = rand.nextInt(9);
    		System.out.println(col);
    		if(enemyBoard.gameBoard.get(col).get(row).getShip() == null) {
    	    	Ship ship =  new Ship(col, row, 1);
    	    	enemyBoard.addShip(ship, true);
    		}
    		else
    			i--;
    	}
    }
    
    public void enemyGuess() {
		Random rand = new Random();
		int col2 = rand.nextInt(10);
		int row2 = rand.nextInt(10);
		while(true) {
			if((playerBoard.gameBoard.get(col2).get(row2).getHit())) {
				col2 = rand.nextInt(10);
				row2 = rand.nextInt(10);
			}
			else
				break;
		}
        Node n = playerBoard.getNode(col2, row2);
        Rectangle r2 = (Rectangle) n;
    	if(playerBoard.gameBoard.get(col2).get(row2).getShip() != null) {
    		playerShipsAmount--;
    		r2.setFill(Color.PURPLE);
    	}
    	else
    		r2.setFill(Color.BEIGE);
    	playerBoard.gameBoard.get(col2).get(row2).setHit(true);
    }

}
